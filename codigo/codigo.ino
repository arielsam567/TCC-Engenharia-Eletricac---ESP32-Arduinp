// Inclui a biblioteca para comunica√ß√£o Bluetooth Serial
#include "BluetoothSerial.h"
#include <Preferences.h>
#include <driver/adc.h>
#include "esp_adc_cal.h"
#include <math.h>

/*
 * ========================================
 * SISTEMA DE DEBUG CONFIGUR√ÅVEL
 * ========================================
 * 
 * Para DESATIVAR todos os Serial.println de debug:
 * - Altere a constante DEBUG_ENABLED para false
 * - N√£o √© necess√°rio remover nenhum c√≥digo
 * 
 * Para ATIVAR novamente:
 * - Altere DEBUG_ENABLED para true
 * 
 * Exemplo:
 * const bool DEBUG_ENABLED = false;  // Debug desativado
 * const bool DEBUG_ENABLED = true;   // Debug ativado
 * 
 * ========================================
 */

// Verifica se o Bluetooth est√° realmente dispon√≠vel no microcontrolador
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to enable it
#endif

// Cria um objeto para controlar o Bluetooth Serial
BluetoothSerial SerialBT;

// Defini√ß√£o dos pinos
const int entrada = 34;     // GPIO34 (entrada anal√≥gica do ZMPT101B)
const int rele1 = 25;      // GPIO25 (rel√© 1)
const int rele2 = 32;      // GPIO32 (rel√© 2) 
const int ledBluetooh = 2;       // GPIO2 (rel√© 3) - Controlado automaticamente pelo status do Bluetooth

// Defini√ß√£o dos pinos dos LEDs indicadores
const int ledAzul = 23;     // GPIO23 - LED Azul (Modos 1, 2 e 5)
const int ledAmarelo = 22;  // GPIO22 - LED Verde (Modos 3, 4 e 5)
const int ledVermelho = 19; // GPIO21 - LED Vermelho (Indicador de tens√£o AC)
const int ledBranco = 18;   // GPIO18 - LED Branco (Indicador de contagem de tempo e opera√ß√£o c√≠clica)

const char* btName = "REL√â MULTIFUNCIONAL - TCC ";

// Configura√ß√µes do sensor ZMPT101B - ADC ESP32
const adc1_channel_t ZMPT101B_CHANNEL = ADC1_CHANNEL_6; // GPIO34
const adc_atten_t ZMPT101B_ATTEN = ADC_ATTEN_DB_11;
const adc_bits_width_t ZMPT101B_WIDTH = ADC_WIDTH_BIT_12;
const int ZMPT101B_SAMPLES = 2000;        // N√∫mero de amostras para c√°lculo RMS
const float ZMPT101B_THRESHOLD_VRMS = 15.0f; // Threshold em Volts RMS para detectar tens√£o AC
const float ZMPT101B_MODULE_MEASURED_VRMS = 1.663f; // Tens√£o medida no pino OUT (Vrms) - ajuste conforme sua instala√ß√£o
const float ZMPT101B_NETWORK_VOLTAGE = 220.0f; // Tens√£o da rede (V)

// Vari√°vel para caracteriza√ß√£o do ADC
esp_adc_cal_characteristics_t adc_chars;

// Estados da m√°quina de estados
enum Estados {
  MODO_1 = 1,     // Retardo na energiza√ß√£o
  MODO_2 = 2,     // Retardo na desenergiza√ß√£o
  MODO_3 = 3,     // C√≠clico com in√≠cio ligado
  MODO_4 = 4,     // C√≠clico com in√≠cio desligado
  MODO_5 = 5,     // Partida estrela-tri√¢ngulo
  MODO_6 = 6      // Altera√ß√£o via comando bluetooh
};

// Estrutura para configura√ß√£o dos rel√©s
struct ConfigReles {
  int modo;
  unsigned long tempo1;  // em segundos (usando sempre tempo1)
};

// ========================================
// CONSTANTES DO SISTEMA
// ========================================

// Valores default para configura√ß√£o
const int DEFAULT_MODO = 1;
const unsigned long DEFAULT_TEMPO1 = 300; // 5 minutos em segundos

// Valores de valida√ß√£o para modo
const int MIN_MODO = 1;
const int MAX_MODO = 5;

// Valores de valida√ß√£o para tempo
const unsigned long MAX_TEMPO = 1728000; // 20 dias em segundos
const unsigned long SEGUNDOS_POR_DIA = 86400; // Segundos em um dia

// Tempos de controle
const unsigned long TEMPO_STATUS_AUTOMATICO = 3000; // 3 segundos para envio autom√°tico de status
const unsigned long TEMPO_LOG_MODO = 5000; // 5 segundos para log do modo
const unsigned long DELAY_LOOP = 50; // Delay do loop principal em milissegundos
const unsigned long CONVERSOR_SEGUNDOS = 1000; // Conversor de millis() para segundos

// Configura√ß√µes de comunica√ß√£o
const unsigned long VELOCIDADE_SERIAL = 115200; // Velocidade do Serial em bauds

// Valores de controle
const int VALOR_INVALIDO = -1; // Valor para indicar erro ou inv√°lido
const int VALOR_NAO_ENCONTRADO = -1; // Valor para indicar que n√£o foi encontrado
const unsigned long VALOR_INICIAL = 0; // Valor inicial para vari√°veis de tempo

// Tempo de transi√ß√£o estrela-tri√¢ngulo (em milissegundos)
const unsigned long TEMPO_TRANSICAO_ESTRELA_TRIANGULO = 150;

// Configura√ß√µes dos LEDs
const unsigned long TEMPO_PISCA_LED = 500; // Tempo de piscada dos LEDs em milissegundos
const unsigned long TEMPO_PISCA_LED_BRANCO_RAPIDO = 200; // Tempo de piscada r√°pida do LED branco (200ms)
const unsigned long TEMPO_PISCA_LED_BRANCO_LENTO = 500;  // Tempo de piscada lenta do LED branco (500ms)

// Controle de debug - altere para false para desativar todos os Serial.println
const bool DEBUG_ENABLED = true;

// ========================================
// VARI√ÅVEIS GLOBAIS
// ========================================

bool deviceConnected = false;
bool oldDeviceConnected = false;
String comandoRecebido = "";

Estados estadoAtual = (Estados)DEFAULT_MODO; // Inicializa com modo padr√£o
ConfigReles config;
unsigned long tempoInicio = 0;
unsigned long tempoAtual = 0;
bool relesLigados = false;
bool modoEstrela = true; // true = estrela, false = triangulo

// Vari√°veis para controle de altera√ß√£o manual
bool relesLigadosAnterior = false;
bool modoEstrelaAnterior = true;
unsigned long ultimaAlteracaoManual = 0;

// Vari√°veis para controle da transi√ß√£o estrela-tri√¢ngulo (MODO 5)
bool transicaoEstrelaTrianguloEmAndamento = false;
unsigned long tempoInicioTransicao = 0;

// Vari√°veis para valida√ß√£o da entrada (anti-ru√≠do)
const int VALIDACAO_ENTRADA_COUNT = 3; // N√∫mero de leituras consecutivas necess√°rias
int contadorEntradaAtiva = 0;
int contadorEntradaInativa = 0;
bool entradaValidada = false; // Estado validado da entrada

// Vari√°vel para controle de mudan√ßa de status da entrada
bool entradaAtivaAnterior = false;

// Vari√°veis para controle de status autom√°tico
unsigned long tempoConexao = 0;
bool statusEnviado = false;

// Vari√°veis para controle de tempo no modo 1
bool temporizadorModo1Iniciado = false;

// Vari√°veis para controle dos LEDs
unsigned long ultimoTempoPiscaLed = 0;
bool estadoPiscaLed = false;

// Vari√°veis para controle do LED branco
unsigned long ultimoTempoPiscaLedBranco = 0;
bool estadoPiscaLedBranco = false;

Preferences preferences;

// Declara√ß√µes de fun√ß√µes (forward declarations)
void iniciarModo();
void executarMaquinaEstados();
void ligarRele(bool ligar);
void ligarReleEstrela();
void ligarReleTriangulo();
void enviarResposta(String resposta);
void enviarNotificacao(String notificacao);
bool processarConfiguracao(String comando);
void salvarConfiguracao();
void carregarConfiguracao();
void restaurarEstadoSalvo();
void verificarConexaoBluetooth();
void processarComandosRecebidos();
void verificarAlteracaoManual();
void enviarNotificacaoAlteracaoManual(bool novoEstado, String tipoAlteracao);
void enviarStatusAutomatico();
void verificarStatusEntrada();
void calibrarZMPT101B();
bool ajustarThresholdZMPT101B(String comando);
void debugPrint(String mensagem);
void controlarLEDs();
void configurarLEDs();
void controlarLEDBranco();

void setup() {
  Serial.begin(VELOCIDADE_SERIAL);
  debugPrint("=== INICIANDO RELAY TIMER ===");
  
  // Configura√ß√£o do ADC para ZMPT101B
  debugPrint("üîß Configurando ADC para ZMPT101B...");
  adc1_config_width(ZMPT101B_WIDTH);
  adc1_config_channel_atten(ZMPT101B_CHANNEL, ZMPT101B_ATTEN);
  esp_adc_cal_characterize(ADC_UNIT_1, ZMPT101B_ATTEN, ZMPT101B_WIDTH, 1100, &adc_chars);
  delay(100);
  debugPrint("‚úÖ ADC configurado com sucesso");
  
  // Configura√ß√£o dos pinos
  // GPIO34 √© entrada anal√≥gica por padr√£o, n√£o precisa de pinMode
  pinMode(rele1, OUTPUT);
  pinMode(rele2, OUTPUT);
  pinMode(ledBluetooh, OUTPUT);
  
  // Configura√ß√£o dos LEDs indicadores
  configurarLEDs();
  
  // Inicializar rel√©s desligados
  digitalWrite(rele1, HIGH);
  digitalWrite(rele2, HIGH);
  digitalWrite(ledBluetooh, LOW); // LED Bluetooth inicia desligado (sem conex√£o)
  
  // Inicializar vari√°vel de controle da entrada
  entradaAtivaAnterior = validarEntrada();
  debugPrint("üîç Status inicial da entrada: " + String(entradaAtivaAnterior ? "ATIVA" : "INATIVA"));
  
  // Carregar configura√ß√£o salva
  debugPrint("üîÑ Iniciando carregamento da configura√ß√£o");
  carregarConfiguracao();
  
  // Inicializar Bluetooth
  SerialBT.begin(btName); 
  
  // Verificar status inicial do Bluetooth e configurar LED
  deviceConnected = SerialBT.hasClient();
  digitalWrite(ledBluetooh, deviceConnected ? HIGH : LOW);
  debugPrint("üîµ Status inicial Bluetooth: " + String(deviceConnected ? "CONECTADO" : "DESCONECTADO"));
  
  debugPrint("üöÄ Relay Timer iniciado - Modo " + String(config.modo) + " - T1: " + String(config.tempo1) + "s");
  debugPrint("üìä Estado atual ap√≥s inicializa√ß√£o: " + String(estadoAtual));
}

void loop() {
  // Verificar conex√£o Bluetooth
  verificarConexaoBluetooth();
  
  // Processar comandos recebidos
  processarComandosRecebidos();
  
  // Verificar altera√ß√µes manuais nos rel√©s
  verificarAlteracaoManual();
  
  // Executar m√°quina de estados
  executarMaquinaEstados();
  
  // Controlar LEDs indicadores
  controlarLEDs();
  
  // delay(DELAY_LOOP); // pausa para estabilidade
}

void verificarConexaoBluetooth() {
  // Verificar se h√° dispositivos conectados
  bool conectado = SerialBT.hasClient();
  
  if (conectado != deviceConnected) {
    deviceConnected = conectado;
    
    if (deviceConnected) {
      // Ligar LED Bluetooth quando conectar
      digitalWrite(ledBluetooh, HIGH);
      debugPrint("üîµ Bluetooth conectado - LED Bluetooth ligado");
      
      // Inicializar controle de status autom√°tico
      tempoConexao = millis();
      statusEnviado = false;
      
      enviarNotificacao("CONECTADO");
    } else {
      // Desligar LED Bluetooth quando desconectar
      digitalWrite(ledBluetooh, LOW);
      debugPrint("üî¥ Bluetooth desconectado - LED Bluetooth desligado");
      
      // Resetar controle de status autom√°tico
      statusEnviado = false;
    }
    
    oldDeviceConnected = deviceConnected;
  }
  
  // Verificar se deve enviar status autom√°tico
  if (deviceConnected && !statusEnviado && (millis() - tempoConexao) >= TEMPO_STATUS_AUTOMATICO) {
    debugPrint("üìä Enviando status autom√°tico ap√≥s conex√£o Bluetooth");
    enviarStatusAutomatico();
    statusEnviado = true;
  }
}

void processarComandosRecebidos() {
  // Se h√° dados dispon√≠veis no Bluetooth
  if (SerialBT.available()) {
    char c = SerialBT.read();
    
    // Adicionar caractere ao comando
    comandoRecebido += c;
    
    // Verificar se o comando termina com _END
    if (comandoRecebido.endsWith("_END")) {
      // Comando completo recebido - remover _END
      String comandoProcessado = comandoRecebido.substring(0, comandoRecebido.length() - 4);
      debugPrint("üì• Comando recebido: " + comandoProcessado);
      
      if (comandoProcessado == "X" || comandoProcessado == "6") {
        // Comando para alterar estado dos rel√©s
        debugPrint("üîß Comando de controle de rel√©s recebido: " + comandoProcessado);
        if (relesLigados) {
          ligarRele(false); // Desliga os rel√©s
        } else {
          ligarRele(true);  // Liga os rel√©s
        }
        enviarResposta("OK");
      } else if (comandoProcessado == "CALIBRAR") {
        // Comando para calibrar o sensor ZMPT101B
        debugPrint("üîß Comando de calibra√ß√£o recebido");
        calibrarZMPT101B();
        enviarResposta("CALIBRACAO_INICIADA");
      } else if (ajustarThresholdZMPT101B(comandoProcessado)) {
        // Comando para ajustar threshold do ZMPT101B
        debugPrint("üîß Comando de ajuste de threshold processado");
        // A resposta j√° √© enviada na fun√ß√£o ajustarThresholdZMPT101B
      } else if (processarConfiguracao(comandoProcessado)) {
        // Comando de configura√ß√£o v√°lido
        debugPrint("‚úÖ Comando de configura√ß√£o v√°lido - aplicando altera√ß√µes");
        salvarConfiguracao();
        debugPrint("üîÑ Restaurando estado baseado na nova configura√ß√£o");
        restaurarEstadoSalvo(); // Restaurar estado baseado na nova configura√ß√£o
        debugPrint("üöÄ Iniciando modo com nova configura√ß√£o");
        iniciarModo(); // Aplicar a nova configura√ß√£o imediatamente
        enviarResposta("OK");
        debugPrint("‚úÖ Configura√ß√£o aplicada com sucesso");
      } else {
        // Comando inv√°lido ou bloqueado por seguran√ßa
        debugPrint("‚ùå Configura√ß√£o n√£o p√¥de ser aplicada");
      }
      
      comandoRecebido = ""; // Limpar comando
    }
  }
}

bool processarConfiguracao(String comando) {
  debugPrint("üîç Processando configura√ß√£o: " + comando);
  
  // Verificar se √© comando de configura√ß√£o (formato: "modo|tempo1|tempo1")
  int pipe1 = comando.indexOf('|');
  int pipe2 = comando.indexOf('|', pipe1 + 1);
  
  if (pipe1 == VALOR_INVALIDO || pipe2 == VALOR_INVALIDO) {
    debugPrint("‚ùå Formato inv√°lido: " + comando);
    return false;
  }
  
  int modo = comando.substring(0, pipe1).toInt();
  unsigned long t1 = comando.substring(pipe1 + 1, pipe2).toInt();
  unsigned long t1_aux = comando.substring(pipe2 + 1).toInt();
  
  debugPrint("üìä Valores extra√≠dos - Modo: " + String(modo) + ", T1: " + String(t1) + ", T1_aux: " + String(t1_aux));
  
  // Validar modo
  if (modo < MIN_MODO || modo > MAX_MODO) {
    debugPrint("‚ùå Modo inv√°lido: " + String(modo) + " (deve ser entre " + String(MIN_MODO) + " e " + String(MAX_MODO) + ")");
    return false;
  }
  
  // Validar tempos (m√°ximo 20 dias)
  if (t1 > MAX_TEMPO || t1_aux > MAX_TEMPO) {
    debugPrint("‚ùå Tempo muito longo: m√°ximo " + String(MAX_TEMPO / SEGUNDOS_POR_DIA) + " dias");
    return false;
  }
  
  // VERIFICA√á√ÉO DE SEGURAN√áA: N√£o permitir alterar modo se entrada estiver ativa
  bool entradaAtiva = validarEntrada();
  debugPrint("üîç Status VALIDADO da entrada durante valida√ß√£o: " + String(entradaAtiva ? "ATIVA" : "INATIVA"));
  
  if (entradaAtiva) {
    debugPrint("üö® N√£o √© poss√≠vel alterar modo com entrada ativa!");
    
    // Enviar mensagem de erro via Bluetooth
    if (deviceConnected) {
      enviarResposta("ERR: Entrada ativa. Desligue a entrada para alterar o modo.");
      enviarNotificacao("ALERTA: Modo n√£o pode ser alterado com entrada ativa!");
    }
    
    return false;
  }
  
  // Verificar se est√° tentando alterar para um modo diferente
  if (modo != config.modo) {
    debugPrint("üîÑ Alterando modo: " + String(config.modo) + " ‚Üí " + String(modo));
  }
  
  debugPrint("üíæ Configura√ß√£o atual antes da altera√ß√£o - Modo: " + String(config.modo) + ", T1: " + String(config.tempo1));
  
  config.modo = modo;
  config.tempo1 = t1;
  
  debugPrint("‚úÖ Configura√ß√£o v√°lida - Modo: " + String(modo) + ", T1: " + String(t1) + "s");
  debugPrint("üíæ Nova configura√ß√£o definida - Modo: " + String(config.modo) + ", T1: " + String(config.tempo1));
  
  return true;
}

void salvarConfiguracao() {
  debugPrint("üíæ Salvando configura√ß√£o na EEPROM - Modo: " + String(config.modo) + ", T1: " + String(config.tempo1));
  
  preferences.begin("relaytimer", false);
  preferences.putInt("modo", config.modo);
  preferences.putULong("tempo1", config.tempo1);
  preferences.end();
  
  debugPrint("‚úÖ Configura√ß√£o salva na EEPROM com sucesso");
  
  // Verificar se foi salva corretamente
  preferences.begin("relaytimer", true);
  int modoSalvo = preferences.getInt("modo", VALOR_NAO_ENCONTRADO);
  unsigned long tempoSalvo = preferences.getULong("tempo1", VALOR_INICIAL);
  preferences.end();
  
  debugPrint("üîç Verifica√ß√£o - Modo salvo: " + String(modoSalvo) + ", Tempo salvo: " + String(tempoSalvo));
}

void carregarConfiguracao() {
  debugPrint("üìñ Iniciando carregamento da configura√ß√£o da EEPROM");
  
  preferences.begin("relaytimer", true);
  config.modo = preferences.getInt("modo", DEFAULT_MODO);
  config.tempo1 = preferences.getULong("tempo1", DEFAULT_TEMPO1);
  preferences.end();
  
  debugPrint("üìñ Configura√ß√£o carregada da EEPROM - Modo: " + String(config.modo) + ", T1: " + String(config.tempo1) + "s");
  
  // Restaurar o estado atual baseado na configura√ß√£o carregada
  debugPrint("üîÑ Chamando restaurarEstadoSalvo() para aplicar configura√ß√£o carregada");
  restaurarEstadoSalvo();
}

void restaurarEstadoSalvo() {
  debugPrint("üîÑ Restaurando estado salvo - Modo configurado: " + String(config.modo));
  
  // Se h√° uma configura√ß√£o v√°lida salva, restaurar o estado
  if (config.modo >= MIN_MODO && config.modo <= MAX_MODO) {
    estadoAtual = (Estados)config.modo;
    debugPrint("‚úÖ Estado restaurado para MODO " + String(estadoAtual));
    
    // Configurar estado inicial dos rel√©s baseado no modo restaurado
    switch (estadoAtual) {
      case MODO_1: // Retardo na energiza√ß√£o - inicia desligado
        relesLigados = false;
        temporizadorModo1Iniciado = false; // Inicializar temporizador como false
        debugPrint("üìã MODO 1 configurado - rel√©s iniciam DESLIGADOS");
        break;
      case MODO_2: // Retardo na desenergiza√ß√£o - inicia ligado
        relesLigados = true;
        modoEstrela = false; // Inicializar como false para MODO 2
        debugPrint("üìã MODO 2 configurado - rel√©s iniciam LIGADOS");
        break;
      case MODO_3: // C√≠clico com in√≠cio ligado
        relesLigados = true;
        debugPrint("üìã MODO 3 configurado - rel√©s iniciam LIGADOS");
        break;
      case MODO_4: // C√≠clico com in√≠cio desligado
        relesLigados = false;
        debugPrint("üìã MODO 4 configurado - rel√©s iniciam DESLIGADOS");
        break;
      case MODO_5: // Partida estrela-tri√¢ngulo - inicia desligado
        relesLigados = false;
        modoEstrela = true;
        debugPrint("üìã MODO 5 configurado - rel√©s iniciam DESLIGADOS (modo estrela)");
        break;
    }
    
    // Atualizar estados anteriores para detec√ß√£o de altera√ß√£o manual
    relesLigadosAnterior = relesLigados;
    modoEstrelaAnterior = modoEstrela;
    
    debugPrint("üíæ Estados anteriores atualizados - relesLigados: " + String(relesLigados) + ", modoEstrela: " + String(modoEstrela));
  } else {
    // Se n√£o h√° configura√ß√£o, usar modo padr√£o
    estadoAtual = (Estados)DEFAULT_MODO;
    relesLigados = false;
    modoEstrela = true;
    debugPrint("üîÑ Usando MODO " + String(DEFAULT_MODO) + " como padr√£o - configura√ß√£o inv√°lida");
  }
}

void iniciarModo() {
  debugPrint("üöÄ Iniciando modo - Configura√ß√£o atual: modo=" + String(config.modo) + ", tempo1=" + String(config.tempo1));
  
  estadoAtual = (Estados)config.modo;
  tempoInicio = millis();
  tempoAtual = 0;
  
  debugPrint("üìä Estado atual definido para: " + String(estadoAtual));
  
  // Configurar estado inicial baseado no modo (consistente com restaurarEstadoSalvo)
  switch (estadoAtual) {
    case MODO_1: // Retardo na energiza√ß√£o - inicia desligado
      relesLigados = false;
      modoEstrela = true;
      temporizadorModo1Iniciado = false; // Inicializar temporizador como false
      debugPrint("üìã MODO 1 selecionado - rel√©s iniciam DESLIGADOS");
      break;
    case MODO_2: // Retardo na desenergiza√ß√£o - inicia ligado
      relesLigados = true;
      modoEstrela = false; // Inicializar como false para MODO 2
      debugPrint("üìã MODO 2 selecionado - rel√©s iniciam LIGADOS");
      break;
    case MODO_3: // C√≠clico com in√≠cio ligado
      relesLigados = true;
      modoEstrela = true;
      debugPrint("üìã MODO 3 selecionado - rel√©s iniciam LIGADOS");
      break;
    case MODO_4: // C√≠clico com in√≠cio desligado
      relesLigados = false;
      modoEstrela = true;
      debugPrint("üìã MODO 4 selecionado - rel√©s iniciam DESLIGADOS");
      break;
    case MODO_5: // Partida estrela-tri√¢ngulo - inicia desligado
      relesLigados = false;
      modoEstrela = true;
      debugPrint("üìã MODO 5 selecionado - rel√©s iniciam DESLIGADOS (modo estrela)");
      break;
  }
  
  // Inicializar estados anteriores para detec√ß√£o de altera√ß√£o manual
  relesLigadosAnterior = relesLigados;
  modoEstrelaAnterior = modoEstrela;
  
  debugPrint("üöÄ Iniciando modo " + String(config.modo) + " - Estado inicial: " + String(relesLigados ? "LIGADO" : "DESLIGADO"));
  
  // Verificar se a entrada est√° ativa antes de configurar estado inicial
  bool entradaAtiva = validarEntrada();
  debugPrint("üîç Status VALIDADO da entrada: " + String(entradaAtiva ? "ATIVA" : "INATIVA"));
  
  if (!entradaAtiva) {
    // Entrada desacionada - todos os modos iniciam com rel√©s desligados
    ligarRele(false);
    debugPrint("üî¥ Entrada inativa - rel√©s desligados");
    return;
  }
  
  // Aplicar estado inicial baseado no modo (apenas quando entrada ativa)
  ligarRele(relesLigados);
  debugPrint("üü¢ Entrada ativa - aplicando estado inicial do modo " + String(config.modo));
}

void executarMaquinaEstados() {
  // Validar entrada com anti-ru√≠do
  bool entradaAtiva = validarEntrada();
  
  // Log apenas quando o status validado da entrada mudar
  if (entradaAtiva != entradaAtivaAnterior) {
    unsigned long timestamp = millis() / CONVERSOR_SEGUNDOS;
    debugPrint("üîÑ Mudan√ßa de status VALIDADO da entrada: " + String(entradaAtiva ? "ATIVA" : "INATIVA") + " (segundo " + String(timestamp) + ")");
    entradaAtivaAnterior = entradaAtiva;
    
    // Resetar temporizador quando entrada mudar de status
    if (estadoAtual == MODO_1) {
      temporizadorModo1Iniciado = false;
      tempoInicio = millis();
      tempoAtual = 0;
    }
  }
  
  tempoAtual = (millis() - tempoInicio) / CONVERSOR_SEGUNDOS; // converter para segundos
  
  // Log do modo atual sendo executado (a cada 5 segundos para n√£o poluir o log)
  static unsigned long ultimoLogModo = 0;
  if (millis() - ultimoLogModo >= TEMPO_LOG_MODO) {
    debugPrint("üîÑ Executando MODO " + String(estadoAtual) + " - Tempo atual: " + String(tempoAtual) + "s");
    ultimoLogModo = millis();
  }
  
  switch (estadoAtual) {
    case MODO_1: // Retardo na energiza√ß√£o
      if (!entradaAtiva) {
        // Entrada desacionada - desligar rel√©s imediatamente
        if (relesLigados) {
          unsigned long timestamp = millis() / 1000;
          debugPrint("üî¥ MODO 1: Entrada desacionada - desligando rel√©s imediatamente (segundo " + String(timestamp) + ")");
          ligarRele(false);
          // Resetar temporizador para pr√≥xima opera√ß√£o
          temporizadorModo1Iniciado = false;
          tempoInicio = millis();
          tempoAtual = 0;
        }
      } else if (entradaAtiva && !relesLigados) {
        // Entrada acionada e rel√©s desligados - controlar temporizador
        if (!temporizadorModo1Iniciado) {
          // Primeira vez que entrada foi acionada - iniciar temporizador
          tempoInicio = millis();
          tempoAtual = 0;
          temporizadorModo1Iniciado = true;
                unsigned long timestamp = millis() / CONVERSOR_SEGUNDOS;
      debugPrint("‚è∞ MODO 1: Entrada acionada - iniciando temporizador de " + String(config.tempo1) + "s (segundo " + String(timestamp) + ")");
        } else if (tempoAtual >= config.tempo1) {
          // Tempo atingido - ligar rel√©s
          unsigned long timestamp = millis() / CONVERSOR_SEGUNDOS;
          debugPrint("‚úÖ MODO 1 CONCLU√çDO - Rel√©s ligados ap√≥s " + String(config.tempo1) + "s (segundo " + String(timestamp) + ")");
          ligarRele(true);
          // Resetar temporizador para parar o LED branco de piscar
          temporizadorModo1Iniciado = false;
        }
      }
      break;
      
    case MODO_2: // Retardo na desenergiza√ß√£o
      if (!entradaAtiva) {
        // Entrada desacionada - iniciar contagem para desligamento
        if (relesLigados && !modoEstrela) { // Usar modoEstrela como flag de controle
          // Primeira vez que entrada foi desacionada - iniciar temporizador
          modoEstrela = true; // Marcar que temporizador foi iniciado
          tempoInicio = millis();
          tempoAtual = 0;
          debugPrint("üî¥ MODO 2: Entrada desacionada - iniciando contagem para desligamento em " + String(config.tempo1) + "s");
        } else if (relesLigados && modoEstrela && tempoAtual >= config.tempo1) {
          // Tempo de retardo atingido - desligar rel√©s
          debugPrint("‚úÖ MODO 2 CONCLU√çDO - Rel√©s desligados ap√≥s " + String(config.tempo1) + "s");
          ligarRele(false);
          // Resetar flag para parar o LED branco de piscar
          modoEstrela = false;
          estadoAtual = MODO_2; // Permanecer no MODO_2
        }
      } else if (entradaAtiva) {
        // Entrada acionada - ligar rel√©s imediatamente e resetar temporizador
        if (!relesLigados) {
          debugPrint("üü¢ MODO 2: Entrada acionada - ligando rel√©s imediatamente");
          ligarRele(true);
          modoEstrela = false; // Resetar flag de controle
          tempoInicio = millis();
          tempoAtual = 0;
        }
      }
      break;
      
    case MODO_3: // C√≠clico com in√≠cio ligado
      if (!entradaAtiva) {
        // Entrada desacionada - desligar rel√©s imediatamente e interromper ciclo
        if (relesLigados) {
          debugPrint("üî¥ MODO 3: Entrada desacionada - desligando rel√©s imediatamente");
          ligarRele(false);
          // Resetar ciclo para pr√≥xima ativa√ß√£o
          tempoInicio = millis();
          tempoAtual = 0;
        }
      } else if (entradaAtiva) {
        // Entrada acionada - controlar ciclo
        if (relesLigados && tempoAtual >= config.tempo1) {
          // Tempo T1 atingido - desligar rel√©s e iniciar contagem para ligar
          debugPrint("üîÑ MODO 3: Desligando rel√©s ap√≥s " + String(config.tempo1) + "s");
          ligarRele(false);
          tempoInicio = millis();
          tempoAtual = 0;
          debugPrint("‚è∞ MODO 3: Rel√©s desligados, aguardando " + String(config.tempo1) + "s para ligar");
        } else if (!relesLigados && tempoAtual >= config.tempo1) {
          // Tempo T1 atingido - ligar rel√©s e reiniciar ciclo
          debugPrint("üîÑ MODO 3: Ligando rel√©s ap√≥s " + String(config.tempo1) + "s");
          ligarRele(true);
          tempoInicio = millis();
          tempoAtual = 0;
          debugPrint("‚è∞ MODO 3: Rel√©s ligados, aguardando " + String(config.tempo1) + "s para desligar");
        }
      }
      break;
      
    case MODO_4: // C√≠clico com in√≠cio desligado
      if (!entradaAtiva) {
        // Entrada desacionada - desligar rel√©s imediatamente e interromper ciclo
        if (relesLigados) {
          debugPrint("üî¥ MODO 4: Entrada desacionada - desligando rel√©s imediatamente");
          ligarRele(false);
          // Resetar ciclo para pr√≥xima ativa√ß√£o
          tempoInicio = millis();
          tempoAtual = 0;
        }
      } else if (entradaAtiva) {
        // Entrada acionada - controlar ciclo
        if (!relesLigados && tempoAtual >= config.tempo1) {
          // Tempo T1 atingido - ligar rel√©s e iniciar contagem para desligar
          debugPrint("üîÑ MODO 4: Ligando rel√©s ap√≥s " + String(config.tempo1) + "s");
          ligarRele(true);
          tempoInicio = millis();
          tempoAtual = 0;
          debugPrint("‚è∞ MODO 4: Rel√©s ligados, aguardando " + String(config.tempo1) + "s para desligar");
        } else if (relesLigados && tempoAtual >= config.tempo1) {
          // Tempo T1 atingido - desligar rel√©s e reiniciar ciclo
          debugPrint("üîÑ MODO 4: Desligando rel√©s ap√≥s " + String(config.tempo1) + "s");
          ligarRele(false);
          tempoInicio = millis();
          tempoAtual = 0;
          debugPrint("‚è∞ MODO 4: Rel√©s desligados, aguardando " + String(config.tempo1) + "s para ligar");
        }
      }
      break;
      
    case MODO_5: // Partida estrela-tri√¢ngulo
      if (!entradaAtiva) {
        // Entrada desacionada - desligar rel√©s imediatamente e resetar transi√ß√£o
        if (relesLigados) {
          debugPrint("üî¥ MODO 5: Entrada desacionada - desligando rel√©s imediatamente");
          ligarRele(false);
          modoEstrela = true; // Reset para modo estrela
          transicaoEstrelaTrianguloEmAndamento = false; // Cancelar transi√ß√£o em andamento
          tempoInicio = millis();
          tempoAtual = 0;
        }
      } else if (entradaAtiva && !relesLigados && !transicaoEstrelaTrianguloEmAndamento) {
        // Entrada acionada e rel√©s desligados - iniciar modo estrela
        debugPrint("üü¢ MODO 5: Entrada acionada - iniciando modo estrela");
        ligarReleEstrela();
        tempoInicio = millis();
        tempoAtual = 0;
      } else if (entradaAtiva && modoEstrela && !transicaoEstrelaTrianguloEmAndamento && tempoAtual >= config.tempo1) {
        // Iniciar transi√ß√£o para tri√¢ngulo ap√≥s tempo configurado
        debugPrint("‚≠ê‚Üíüî∫ MODO 5: Iniciando transi√ß√£o para tri√¢ngulo ap√≥s " + String(config.tempo1) + "s");
        debugPrint("‚è±Ô∏è  Desligando Rel√© 1 para transi√ß√£o");
        
        // Iniciar transi√ß√£o - desligar Rel√© 1
        digitalWrite(rele1, HIGH);
        transicaoEstrelaTrianguloEmAndamento = true;
        tempoInicioTransicao = millis();
        debugPrint("‚è∞ Transi√ß√£o iniciada - aguardando " + String(TEMPO_TRANSICAO_ESTRELA_TRIANGULO) + "ms");
      } else if (entradaAtiva && transicaoEstrelaTrianguloEmAndamento) {
        // Verificar se tempo de transi√ß√£o foi atingido
        unsigned long tempoTransicao = millis() - tempoInicioTransicao;
        if (tempoTransicao >= TEMPO_TRANSICAO_ESTRELA_TRIANGULO) {
          // Tempo de transi√ß√£o atingido - completar transi√ß√£o
          debugPrint("‚úÖ MODO 5: Transi√ß√£o conclu√≠da - ligando modo tri√¢ngulo");
          
          // Ligar Rel√© 2 (modo tri√¢ngulo)
          ligarReleTriangulo();
          modoEstrela = false;
          transicaoEstrelaTrianguloEmAndamento = false;
          tempoInicio = millis();
          tempoAtual = 0;
          debugPrint("üî∫ Modo tri√¢ngulo ativado com sucesso");
        }
      }
      break;
  }
}

void verificarAlteracaoManual() {
  // Verificar se houve altera√ß√£o manual nos rel√©s
  if (relesLigados != relesLigadosAnterior) {
    unsigned long timestamp = millis() / CONVERSOR_SEGUNDOS;
    debugPrint("üîß Altera√ß√£o manual detectada (segundo " + String(timestamp) + "):");
    debugPrint("   Estado anterior: " + String(relesLigadosAnterior ? "LIGADO" : "DESLIGADO"));
    debugPrint("   Estado atual: " + String(relesLigados ? "LIGADO" : "DESLIGADO"));
    
    if (deviceConnected) {
      enviarNotificacaoAlteracaoManual(relesLigados, "RELE");
    }
    
    relesLigadosAnterior = relesLigados;
    ultimaAlteracaoManual = millis();
  }
  
  // Verificar altera√ß√£o no modo estrela-tri√¢ngulo (apenas para modo 5)
  if (estadoAtual == MODO_5 && modoEstrela != modoEstrelaAnterior) {
    debugPrint("üîß Altera√ß√£o manual detectada (Modo 5):");
    debugPrint("   Modo anterior: " + String(modoEstrelaAnterior ? "ESTRELA" : "TRI√ÇNGULO"));
    debugPrint("   Modo atual: " + String(modoEstrela ? "ESTRELA" : "TRI√ÇNGULO"));
    
    if (deviceConnected) {
      enviarNotificacaoAlteracaoManual(modoEstrela, "ESTRELA_TRIANGULO");
    }
    
    modoEstrelaAnterior = modoEstrela;
    ultimaAlteracaoManual = millis();
  }
}

void enviarNotificacaoAlteracaoManual(bool novoEstado, String tipoAlteracao) {
  unsigned long timestamp = millis() / CONVERSOR_SEGUNDOS; // timestamp em segundos
  String notificacao = "MANUAL|" + String(timestamp) + "|" + tipoAlteracao + "|" + String(novoEstado ? "ON" : "OFF");
  
  debugPrint("üì§ Notifica√ß√£o de altera√ß√£o manual: " + notificacao);
  debugPrint("üì§ Detalhes - Tipo: " + tipoAlteracao + ", Estado: " + String(novoEstado ? "ON" : "OFF") + ", Timestamp: " + String(timestamp));
  
  enviarNotificacao(notificacao);
}

void ligarRele(bool ligar) {
  debugPrint("üîå Fun√ß√£o ligarRele chamada - Par√¢metro: " + String(ligar ? "LIGAR" : "DESLIGAR"));
  debugPrint("üîå Estado anterior dos rel√©s: " + String(relesLigados ? "LIGADO" : "DESLIGADO"));
  
  relesLigados = ligar;
  
  if (ligar) {
    digitalWrite(rele1, LOW);
    digitalWrite(rele2, LOW);
    // N√£o alterar saida3 (porta 2) - ela √© controlada pelo status do Bluetooth
    unsigned long timestamp = millis() / CONVERSOR_SEGUNDOS;
    debugPrint("üîå Rel√©s ligados (GPIO25 e GPIO32) - segundo " + String(timestamp));
    enviarNotificacao("ON");
  } else {
    digitalWrite(rele1, HIGH);
    digitalWrite(rele2, HIGH);
    // N√£o alterar saida3 (porta 2) - ela √© controlada pelo status do Bluetooth
    unsigned long timestamp = millis() / CONVERSOR_SEGUNDOS;
    debugPrint("üîå Rel√©s desligados (GPIO25 e GPIO32) - segundo " + String(timestamp));
    enviarNotificacao("OFF");
  }
  
  debugPrint("üîå Estado atual dos rel√©s: " + String(relesLigados ? "LIGADO" : "DESLIGADO"));
}

void ligarReleEstrela() {
  // Modo estrela: apenas rel√© 1 ligado
  digitalWrite(rele2, HIGH);
  digitalWrite(rele1, LOW);
  // N√£o alterar saida3 (porta 2) - ela √© controlada pelo status do Bluetooth
  relesLigados = true;
  debugPrint("‚≠ê Modo estrela ativado - Rel√© 1 ligado, Rel√© 2 desligado");
  enviarNotificacao("ON");
}

void ligarReleTriangulo() {
  // Modo tri√¢ngulo: apenas rel√© 2 ligado
  digitalWrite(rele2, LOW);
  digitalWrite(rele1, HIGH);
  // N√£o alterar saida3 (porta 2) - ela √© controlada pelo status do Bluetooth
  relesLigados = true;
  debugPrint("üî∫ Modo tri√¢ngulo ativado - Rel√© 1 desligado, Rel√© 2 ligado");
  enviarNotificacao("ON");
}

void enviarResposta(String resposta) {
  if (deviceConnected) {
    SerialBT.println(resposta);
    debugPrint("üì§ Resposta enviada via Bluetooth: " + resposta);
  } else {
    debugPrint("üì§ Resposta n√£o enviada - Bluetooth desconectado: " + resposta);
  }
}

void enviarNotificacao(String notificacao) {
  if (deviceConnected) {
    SerialBT.println(notificacao);
    debugPrint("üì§ Notifica√ß√£o enviada via Bluetooth: " + notificacao);
  } else {
    debugPrint("üì§ Notifica√ß√£o n√£o enviada - Bluetooth desconectado: " + notificacao);
  }
}

void enviarStatusAutomatico() {
  debugPrint("üìä Preparando status autom√°tico - Modo atual: " + String(estadoAtual) + ", Config modo: " + String(config.modo));
  
  // Verificar e informar status da entrada
  verificarStatusEntrada();
  
  // Determinar estado atual dos rel√©s
  String estadoReles = "DESLIGADO";
  if (relesLigados) {
    if (estadoAtual == MODO_5 && !modoEstrela) {
      estadoReles = "TRIANGULO";
    } else if (estadoAtual == MODO_5 && modoEstrela) {
      estadoReles = "ESTRELA";
    } else {
      estadoReles = "LIGADO";
    }
  }
  
  // Determinar nome do modo - sempre mostrar o modo atual
  String nomeModo = "DESCONHECIDO";
  switch (estadoAtual) {
    case MODO_1: nomeModo = "RETARDO_ENERGIZACAO"; break;
    case MODO_2: nomeModo = "RETARDO_DESENERGIZACAO"; break;
    case MODO_3: nomeModo = "CICLICO_INICIO_LIGADO"; break;
    case MODO_4: nomeModo = "CICLICO_INICIO_DESLIGADO"; break;
    case MODO_5: nomeModo = "ESTRELA_TRIANGULO"; break;
    case MODO_6: nomeModo = "CONTROLE_MANUAL"; break;
    default: nomeModo = "MODO_" + String(estadoAtual); break;
  }
  
  // Criar string de status
  String status = "STATUS|" + nomeModo + "|" + String(config.tempo1) + "|" + String(config.tempo1) + "|" + estadoReles;
  
  debugPrint("üìä Enviando status autom√°tico: " + status);
  debugPrint("üìä Detalhes - Estado atual: " + String(estadoAtual) + ", Config modo: " + String(config.modo) + ", Rel√©s: " + estadoReles);
  
  enviarNotificacao(status);
}

void verificarStatusEntrada() {
  bool entradaAtiva = validarEntrada();
  
  debugPrint("üîç Verificando status VALIDADO da entrada: " + String(entradaAtiva ? "ATIVA" : "INATIVA"));
  
  if (deviceConnected) {
    if (entradaValidada) {
      enviarNotificacao("INFO: Entrada ATIVA - Modo n√£o pode ser alterado");
    } else {
      enviarNotificacao("INFO: Entrada INATIVA - Modo pode ser alterado");
    }
  }
  
  debugPrint("üìä Status da entrada: " + String(entradaAtiva ? "ATIVA" : "INATIVA") + " | Validada: " + String(entradaValidada ? "SIM" : "N√ÉO"));
}

// Fun√ß√£o para validar entrada com anti-ru√≠do usando ZMPT101B com c√°lculo RMS
bool validarEntrada() {
  // Calcular tens√£o RMS usando m√©todo correto para tens√£o AC
  long sum_mV = 0;
  
  // Primeira passada: calcular m√©dia
  for (int i = 0; i < ZMPT101B_SAMPLES; i++) {
    int raw = adc1_get_raw(ZMPT101B_CHANNEL);
    uint32_t mv = esp_adc_cal_raw_to_voltage(raw, &adc_chars);
    sum_mV += (long)mv;
  }
  
  double mean_mV = (double)sum_mV / (double)ZMPT101B_SAMPLES;
  double meanV = mean_mV / 1000.0;

  // Segunda passada: calcular RMS
  double sq = 0.0;
  int lastRaw = 0;
  for (int i = 0; i < ZMPT101B_SAMPLES; i++) {
    int raw = adc1_get_raw(ZMPT101B_CHANNEL);
    lastRaw = raw;
    uint32_t mv = esp_adc_cal_raw_to_voltage(raw, &adc_chars);
    double v = (double)mv / 1000.0;
    double d = v - meanV;
    sq += d * d;
  }

  double Vrms_raw = sqrt(sq / (double)ZMPT101B_SAMPLES); 
  double calib = ZMPT101B_NETWORK_VOLTAGE / ZMPT101B_MODULE_MEASURED_VRMS; 
  double Vrms_network = Vrms_raw * calib;
  
  // Determinar se h√° tens√£o AC baseado no threshold RMS
  bool leituraAtual = Vrms_network > ZMPT101B_THRESHOLD_VRMS;
  
  // Log da leitura RMS (a cada 10 verifica√ß√µes para n√£o poluir o log)
  static int contadorLog = 0;
  contadorLog++;
  if (contadorLog >= 10) {
    debugPrint("üìä ZMPT101B - Vrms_rede: " + String(Vrms_network, 2) + "V | Vrms_modulo: " + String(Vrms_raw, 4) + "V | Threshold: " + String(ZMPT101B_THRESHOLD_VRMS) + "V | Status: " + String(leituraAtual ? "ATIVA" : "INATIVA"));
    contadorLog = 0;
  }
  
  if (leituraAtual) {
    // Entrada lida como ativa
    contadorEntradaAtiva++;
    contadorEntradaInativa = 0; // Reset contador inativo
    
    if (contadorEntradaAtiva >= VALIDACAO_ENTRADA_COUNT && !entradaValidada) {
      // Entrada validada como ativa
      entradaValidada = true;
      debugPrint("‚úÖ Entrada VALIDADA como ATIVA ap√≥s " + String(VALIDACAO_ENTRADA_COUNT) + " leituras consecutivas (Vrms: " + String(Vrms_network, 2) + "V)");
      return true;
    }
  } else {
    // Entrada lida como inativa
    contadorEntradaInativa++;
    contadorEntradaAtiva = 0; // Reset contador ativo
    
    if (contadorEntradaInativa >= VALIDACAO_ENTRADA_COUNT && entradaValidada) {
      // Entrada validada como inativa
      entradaValidada = false;
      debugPrint("‚úÖ Entrada VALIDADA como INATIVA ap√≥s " + String(VALIDACAO_ENTRADA_COUNT) + " leituras consecutivas (Vrms: " + String(Vrms_network, 2) + "V)");
      return false;
    }
  }
  
  // Retorna o estado validado anterior (n√£o mudou ainda)
  return entradaValidada;
}

// Fun√ß√£o para calibrar o sensor ZMPT101B
void calibrarZMPT101B() {
  debugPrint("üîß Iniciando calibra√ß√£o do ZMPT101B...");
  debugPrint("‚ö†Ô∏è  Certifique-se de que N√ÉO h√° tens√£o AC na entrada!");
  
  // Usar o mesmo m√©todo da fun√ß√£o validarEntrada para consist√™ncia
  long sum_mV = 0;
  const int amostrasCalibracao = 2000;
  
  for (int i = 0; i < amostrasCalibracao; i++) {
    int raw = adc1_get_raw(ZMPT101B_CHANNEL);
    uint32_t mv = esp_adc_cal_raw_to_voltage(raw, &adc_chars);
    sum_mV += (long)mv;
    
    if (i % 500 == 0) {
      debugPrint("üìä Calibra√ß√£o: " + String(i) + "/" + String(amostrasCalibracao));
    }
  }
  
  double mean_mV = (double)sum_mV / (double)amostrasCalibracao;
  double meanV = mean_mV / 1000.0;
  
  // Calcular RMS para calibra√ß√£o
  double sq = 0.0;
  for (int i = 0; i < amostrasCalibracao; i++) {
    int raw = adc1_get_raw(ZMPT101B_CHANNEL);
    uint32_t mv = esp_adc_cal_raw_to_voltage(raw, &adc_chars);
    double v = (double)mv / 1000.0;
    double d = v - meanV;
    sq += d * d;
  }
  
  double Vrms_raw = sqrt(sq / (double)amostrasCalibracao);
  double Vrms_network = Vrms_raw * (ZMPT101B_NETWORK_VOLTAGE / ZMPT101B_MODULE_MEASURED_VRMS);
  
  debugPrint("üìä Calibra√ß√£o conclu√≠da:");
  debugPrint("   M√©dia sem tens√£o: " + String(meanV, 4) + "V");
  debugPrint("   Vrms m√≥dulo: " + String(Vrms_raw, 4) + "V");
  debugPrint("   Vrms rede estimada: " + String(Vrms_network, 2) + "V");
  debugPrint("   Threshold atual: " + String(ZMPT101B_THRESHOLD_VRMS) + "V");
  
  // Sugerir novo threshold baseado na calibra√ß√£o
  float novoThreshold = Vrms_network + 5.0; // Threshold = tens√£o calibrada + margem de seguran√ßa
  
  debugPrint("   Threshold sugerido: " + String(novoThreshold, 1) + "V");
  
  // Enviar resultado da calibra√ß√£o via Bluetooth se conectado
  if (deviceConnected) {
    String resultadoCalibracao = "CALIBRACAO|" + String(Vrms_network, 2) + "|" + String(novoThreshold, 1);
    enviarNotificacao(resultadoCalibracao);
  }
}

// Fun√ß√£o para ajustar threshold do ZMPT101B via comando
bool ajustarThresholdZMPT101B(String comando) {
  // Formato: "THRESHOLD|valor" (valor em Volts RMS)
  if (comando.startsWith("THRESHOLD|")) {
    float novoThreshold = comando.substring(10).toFloat();
    
    if (novoThreshold > 0.0 && novoThreshold < 300.0) { // Threshold entre 0V e 300V RMS
      // Aqui voc√™ pode implementar a l√≥gica para salvar o novo threshold
      // Por enquanto, apenas loga a altera√ß√£o
      debugPrint("üîß Threshold ZMPT101B alterado para: " + String(novoThreshold, 1) + "V RMS");
      
      if (deviceConnected) {
        enviarResposta("THRESHOLD_ALTERADO|" + String(novoThreshold, 1) + "V");
      }
      return true;
    } else {
      debugPrint("‚ùå Threshold inv√°lido: " + String(novoThreshold, 1) + "V");
      if (deviceConnected) {
        enviarResposta("ERR: Threshold deve estar entre 0.1V e 300V RMS");
      }
      return false;
    }
  }
  return false;
}

void debugPrint(String mensagem) {
  if (DEBUG_ENABLED) {
    Serial.println(mensagem);
  }
}

// ========================================
// FUN√á√ïES DE CONTROLE DOS LEDs
// ========================================

// Fun√ß√£o para configurar os pinos dos LEDs
void configurarLEDs() {
  pinMode(ledAzul, OUTPUT);
  pinMode(ledAmarelo, OUTPUT);
  pinMode(ledVermelho, OUTPUT);
  pinMode(ledBranco, OUTPUT);
  
  // Inicializar todos os LEDs desligados
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledAmarelo, LOW);
  digitalWrite(ledVermelho, LOW);
  digitalWrite(ledBranco, LOW);
  
  debugPrint("üîß LEDs configurados: Azul(GPIO23), Amarelo(GPIO22), Vermelho(GPIO21), Branco(GPIO18)");
}

// Fun√ß√£o principal para controlar os LEDs baseado no modo atual
void controlarLEDs() {
  // Controlar LED Vermelho (indicador de tens√£o AC)
  bool tensaoAC = validarEntrada();
  digitalWrite(ledVermelho, tensaoAC ? HIGH : LOW);
  
  // Controlar LEDs Azul e Amarelo baseado no modo atual
  switch (estadoAtual) {
    case MODO_1: // Retardo na energiza√ß√£o
      digitalWrite(ledAzul, HIGH);      // LED Azul sempre aceso
      digitalWrite(ledAmarelo, LOW);    // LED Amarelo sempre desligado
      break;
      
    case MODO_2: // Retardo na desenergiza√ß√£o
      // LED Azul piscando
      if (millis() - ultimoTempoPiscaLed >= TEMPO_PISCA_LED) {
        estadoPiscaLed = !estadoPiscaLed;
        digitalWrite(ledAzul, estadoPiscaLed ? HIGH : LOW);
        ultimoTempoPiscaLed = millis();
      }
      digitalWrite(ledAmarelo, LOW);    // LED Amarelo sempre desligado
      break;
      
    case MODO_3: // C√≠clico com in√≠cio ligado
      digitalWrite(ledAzul, LOW);       // LED Azul sempre desligado
      digitalWrite(ledAmarelo, HIGH);   // LED Amarelo sempre aceso
      break;
      
    case MODO_4: // C√≠clico com in√≠cio desligado
      digitalWrite(ledAzul, LOW);       // LED Azul sempre desligado
      // LED Amarelo piscando
      if (millis() - ultimoTempoPiscaLed >= TEMPO_PISCA_LED) {
        estadoPiscaLed = !estadoPiscaLed;
        digitalWrite(ledAmarelo, estadoPiscaLed ? HIGH : LOW);
        ultimoTempoPiscaLed = millis();
      }
      break;
      
    case MODO_5: // Partida estrela-tri√¢ngulo
      digitalWrite(ledAzul, HIGH);      // LED Azul sempre aceso
      digitalWrite(ledAmarelo, HIGH);   // LED Amarelo sempre aceso
      break;
      
    default:
      // Modo inv√°lido - todos os LEDs desligados
      digitalWrite(ledAzul, LOW);
      digitalWrite(ledAmarelo, LOW);
      digitalWrite(ledVermelho, LOW);
      digitalWrite(ledBranco, LOW);
      break;
  }
  
  // Controlar LED Branco baseado no modo atual
  controlarLEDBranco();
}

// Fun√ß√£o para controlar especificamente o LED branco
void controlarLEDBranco() {
  switch (estadoAtual) {
    case MODO_1: // Retardo na energiza√ß√£o
      // LED Branco pisca apenas durante contagem de tempo para energizar (200ms)
      if (temporizadorModo1Iniciado) {
        if (millis() - ultimoTempoPiscaLedBranco >= TEMPO_PISCA_LED_BRANCO_RAPIDO) {
          estadoPiscaLedBranco = !estadoPiscaLedBranco;
          digitalWrite(ledBranco, estadoPiscaLedBranco ? HIGH : LOW);
          ultimoTempoPiscaLedBranco = millis();
        }
      } else {
        digitalWrite(ledBranco, LOW); // Desligado quando n√£o est√° contando tempo
      }
      break;
      
    case MODO_2: // Retardo na desenergiza√ß√£o
      // LED Branco pisca apenas durante contagem de tempo para desenergizar (200ms)
      if (relesLigados && modoEstrela && tempoAtual < config.tempo1) {
        // Piscar apenas quando estiver contando tempo para desligar (modoEstrela = true indica temporizador ativo)
        if (millis() - ultimoTempoPiscaLedBranco >= TEMPO_PISCA_LED_BRANCO_RAPIDO) {
          estadoPiscaLedBranco = !estadoPiscaLedBranco;
          digitalWrite(ledBranco, estadoPiscaLedBranco ? HIGH : LOW);
          ultimoTempoPiscaLedBranco = millis();
        }
      } else {
        digitalWrite(ledBranco, LOW); // Desligado quando n√£o est√° contando tempo
      }
      break;
      
    case MODO_3: // C√≠clico com in√≠cio ligado
      // LED Branco pisca continuamente durante opera√ß√£o c√≠clica (500ms), apenas quando sensor estiver ativo
      if (validarEntrada()) { // Apenas quando entrada estiver ativa
        if (millis() - ultimoTempoPiscaLedBranco >= TEMPO_PISCA_LED_BRANCO_LENTO) {
          estadoPiscaLedBranco = !estadoPiscaLedBranco;
          digitalWrite(ledBranco, estadoPiscaLedBranco ? HIGH : LOW);
          ultimoTempoPiscaLedBranco = millis();
        }
      } else {
        digitalWrite(ledBranco, LOW); // Desligado quando sensor inativo
      }
      break;
      
    case MODO_4: // C√≠clico com in√≠cio desligado
      // LED Branco pisca continuamente durante opera√ß√£o c√≠clica (500ms), apenas quando sensor estiver ativo
      if (validarEntrada()) { // Apenas quando entrada estiver ativa
        if (millis() - ultimoTempoPiscaLedBranco >= TEMPO_PISCA_LED_BRANCO_LENTO) {
          estadoPiscaLedBranco = !estadoPiscaLedBranco;
          digitalWrite(ledBranco, estadoPiscaLedBranco ? HIGH : LOW);
          ultimoTempoPiscaLedBranco = millis();
        }
      } else {
        digitalWrite(ledBranco, LOW); // Desligado quando sensor inativo
      }
      break;
      
    case MODO_5: // Partida estrela-tri√¢ngulo
      // LED Branco pisca apenas durante contagem de tempo estrela (200ms), no modo tri√¢ngulo n√£o deve piscar
      if (modoEstrela && tempoAtual < config.tempo1) {
        // Piscar apenas quando estiver no modo estrela e contando tempo para transi√ß√£o
        if (millis() - ultimoTempoPiscaLedBranco >= TEMPO_PISCA_LED_BRANCO_RAPIDO) {
          estadoPiscaLedBranco = !estadoPiscaLedBranco;
          digitalWrite(ledBranco, estadoPiscaLedBranco ? HIGH : LOW);
          ultimoTempoPiscaLedBranco = millis();
        }
      } else {
        digitalWrite(ledBranco, LOW); // Desligado quando n√£o est√° contando tempo estrela
      }
      break;
      
    default:
      digitalWrite(ledBranco, LOW); // Desligado para modo inv√°lido
      break;
  }
}
